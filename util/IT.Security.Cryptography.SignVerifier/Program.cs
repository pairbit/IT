using IT.Security.Cryptography;
using IT.Security.Cryptography.JinnServer;
using IT.Security.Cryptography.Models;
using System.Reflection;
using System.Text;
using System.Text.Encodings.Web;
using System.Text.Json;
using System.Text.Json.Serialization;

string? url = null;

if (args.Length > 0)
{
    var argUrl = args[0];
    if (!string.IsNullOrWhiteSpace(argUrl))
    {
        url = argUrl;
        Console.WriteLine($"Url address JinnServer '{url}'");
    }
}

if (url == null)
{
    Console.WriteLine($"Enter url address JinnServer (example: http://0.0.0.0:8080/tccs/SignatureValidationService)");
    Console.Write("Url JinnServer: ");
    url = Console.ReadLine();

    if (string.IsNullOrWhiteSpace(url))
    {
        Console.WriteLine($"Url address JinnServer '{url}' is empty or whitespace");
        return;
    } 
}

ISignatureVerifier signVerifier = new ValidationService(() => new ValidationOptions { ValidationUrl = url });

if (Check(signVerifier))
{
    var location = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);

    var rootPath = Path.GetFullPath(Path.Combine(location!, "sign"));

    if (!Directory.Exists(rootPath))
    {
        Console.WriteLine($"Directory sign not found '{rootPath}'");
        return;
    }

    Console.WriteLine($"Directory sign found '{rootPath}'");

    var files = Directory.GetFiles(rootPath, "*.xml", SearchOption.TopDirectoryOnly);

    var count = files.Length;

    var width = count.ToString().Length;

    Console.WriteLine($"Found {count} signs by mask '*.xml'");

    var options = new JsonSerializerOptions
    {
        WriteIndented = true,
        Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        DictionaryKeyPolicy = JsonNamingPolicy.CamelCase
    };
    options.Converters.Add(new JsonStringEnumConverter(JsonNamingPolicy.CamelCase));

    for (int i = 0; i < files.Length; i++)
    {
        var file = files[i];
        var dirname = Path.GetDirectoryName(file)!;
        var filename = Path.GetFileName(file);

        var no = (i + 1).ToString().PadRight(width);

        Console.WriteLine();
        Console.Write($"[{no}] {filename}: ");

        try
        {
            var detailPath = Path.Combine(dirname, $"{filename}.verifed.json");

            if (File.Exists(detailPath))
            {
                Console.ForegroundColor = ConsoleColor.DarkYellow;
                Console.Write("Detail verifed exist");
                Console.ResetColor();
                continue;
            }

            var signature = File.ReadAllText(file);

            var detail = signVerifier.VerifyDetail(signature);

            var contents = JsonSerializer.Serialize(detail, options);

            File.WriteAllText(detailPath, contents);

            Console.ForegroundColor = ConsoleColor.DarkGreen;
            Console.Write("Detail verifed save");
            Console.ResetColor();
        }
        catch (Exception ex)
        {
            Console.ForegroundColor = ConsoleColor.DarkRed;

            Console.Write(ex.Message);

            var inner = ex.InnerException;

            if (inner != null)
                Console.Write($" -> {inner.Message}");
        }
        finally
        {
            Console.ResetColor();
            Console.WriteLine();
        }
    }
}

const string SignatureValid = "";

static bool Check(ISignatureVerifier signVerifier)
{
    Console.Write("Check connection: ");

    try
    {
        var success = signVerifier.Verify(SignatureValid);

        if (success)
        {
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            Console.Write("Ok");
        }

        return success;
    }
    catch (Exception ex)
    {
        Console.ForegroundColor = ConsoleColor.DarkRed;

        Console.Write(ex.Message);

        var inner = ex.InnerException;

        if (inner != null)
            Console.Write($" -> {inner.Message}");

        return false;
    }
    finally
    {
        Console.ResetColor();
        Console.WriteLine();
    }
}

Console.Write("Press any key to exit...");
Console.ReadKey(true);